

Func<string> greet = () => "Hello, World!";
            Console.WriteLine(greet());


 /// <summary>
    /// Datagrid Behavior 
    /// </summary>
    public class ScrollIntoViewBehavior : Behavior<DataGrid>
    {
        public object SelectedObject { get; private set; }

        protected override void OnAttached()
        {
            base.OnAttached();
            this.AssociatedObject.SelectionChanged += 
                new SelectionChangedEventHandler(AssociatedObject_SelectionChanged);
        }

        private void AssociatedObject_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (sender is DataGrid)
            {
                DataGrid grid = (sender as DataGrid);
                if (grid.SelectedItem != null)
                {
                    grid.Dispatcher.Invoke( delegate {
                        grid.UpdateLayout();
                        grid.ScrollIntoView(grid.SelectedItem, null);
                        grid.Focus(); // added this to make it focus to the grid
                    } );
                   
                }
            }
        }

        protected override void OnDetaching()
        {
            base.OnDetaching();
            this.AssociatedObject.SelectionChanged -=
                new SelectionChangedEventHandler(AssociatedObject_SelectionChanged);
        }
    }

	
            <!-- 
            <i:Interaction.Behaviors>
                <fw1:DataGridSelectedItemsBlendBehavior/>
            </i:Interaction.Behaviors>
            
              -->


	 public class DataGridSelectedItemsBlendBehavior : Behavior<DataGrid>
    {
        public static readonly DependencyProperty SelectedItemProperty =
            DependencyProperty.Register("SelectedItems", typeof(IList<object>),
            typeof(DataGridSelectedItemsBlendBehavior),
            new FrameworkPropertyMetadata(null)
            {
                BindsTwoWayByDefault = true
            });

        public IList<object> SelectedItems
        {
            get
            {
                return (IList<object>)GetValue(SelectedItemProperty);
            }
            set
            {
                SetValue(SelectedItemProperty, value);
            }
        }

        protected override void OnAttached()
        {
            base.OnAttached();
            this.AssociatedObject.SelectionChanged += OnSelectionChanged;
        }

        protected override void OnDetaching()
        {
            base.OnDetaching();
            if (this.AssociatedObject != null)
                this.AssociatedObject.SelectionChanged -= OnSelectionChanged;
        }

        private void OnSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.AddedItems != null && e.AddedItems.Count > 0 && this.SelectedItems != null)
            {
                foreach (object obj in e.AddedItems)
                    this.SelectedItems.Add(obj);
            }

            if (e.RemovedItems != null && e.RemovedItems.Count > 0 && this.SelectedItems != null)
            {
                foreach (object obj in e.RemovedItems)
                {
                    this.SelectedItems.Remove(obj);
                }
            }
        }
    }



	
        //GraphData KeyValuePair
        private ObservableCollection<KeyValuePair<double, int>> _wetleyerlist;
        public ObservableCollection<KeyValuePair<double, int>> _WLList
        {
            get { return _wetleyerlist; }
            set { SetProperty(ref _wetleyerlist, value); }
        }


 //if (_WLList != null) _WLList = null;
            //_WLList = new ObservableCollection<KeyValuePair<double, int>>();

			//_WLList.Add(new KeyValuePair<double, int>(iDouble, x));

	  /// <summary>
    /// This is also work but the old way
    /// </summary>
    public class ChartData_Y : INotifyPropertyChanged
    {
        private int _Index;
        public int Index
        {
            get { return _Index; }
            set { _Index = value; OnPropertyChanged(); }
        }

        private double _value;
        public double Value
        {
            get { return _value; }
            set { _value = value; OnPropertyChanged(); }
        }

        private Brush _color;
        public Brush ChartColor
        {
            get { return _color; }
            set { _color = value; OnPropertyChanged(); }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

    }


	???This work

	<CheckBox Content="{Binding Name}"  IsChecked="{Binding IsChecked}"  
                                                          Command="{Binding DataContext.OnCheckCommand,
                                                              RelativeSource={RelativeSource FindAncestor,
                                                                               AncestorType={x:Type UserControl}}}">
                                                </CheckBox>


                                                 internal void SetUpSqlDependency()
        {
            StrDepQuery = "SELECT UID FROM  dbo.BaleArchiveMar20 ORDER BY UID DESC";

            try
            {
                if (DoesUserHavePermission())
                {
                    //You must stop the dependency before starting a new one.
                    SqlDependency.Stop(MainWindow.AppWindows.MainSqlCfg.m_ConString);
                    //You must start the dependency when creating a new one.
                    SqlDependency.Start(MainWindow.AppWindows.MainSqlCfg.m_ConString);

                    using (var sqlConnection = new SqlConnection(MainWindow.AppWindows.MainSqlCfg.m_ConString))
                    {
                        SqlCmd = sqlConnection.CreateCommand();
                        SqlCmd.CommandType = CommandType.Text;
                        SqlCmd.CommandText = StrDepQuery;
                        SqlCmd.Notification = null;

                        //creates a new dependency for the SqlCommand
                        SqlDep = new SqlDependency(SqlCmd);
                        SqlDep.OnChange += SqlDependency_Changed;

                        sqlConnection.Open();
                        SqlCmd.ExecuteNonQuery();
                    }
                    SqlCmd.Dispose();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR in SetUpSqlDependency" + ex);
            }
        }

        private void SqlDependency_Changed(object sender, SqlNotificationEventArgs e)
        {
            //Remove the handler since it's only good for a single notification
            SqlDependency dependency = sender as SqlDependency;
            dependency.OnChange -= SqlDependency_Changed;

            MessageBox.Show("SqlDependency_Changed" + e.Info);
        }

        private bool DoesUserHavePermission()
        {
            bool bpermit = false;
            SqlClientPermission clientPermission;

            try
            {
                clientPermission = new SqlClientPermission(System.Security.Permissions.PermissionState.Unrestricted);
                //this will throw an error if the user does not have the permissions
                clientPermission.Demand();
                bpermit = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR in DoesUserHavePermission" + ex);
            }
            return bpermit;
        }

        // Create a thread
            Thread newWindowThread = new Thread(new ThreadStart(() =>
            {
                // Create our context, and install it:
                SynchronizationContext.SetSynchronizationContext(
                    new DispatcherSynchronizationContext(
                        Dispatcher.CurrentDispatcher));

                LoadingWIndow tempWindow = new LoadingWIndow();
                // When the window closes, shut down the dispatcher
                tempWindow.Closed += (s, e) =>
                   Dispatcher.CurrentDispatcher.BeginInvokeShutdown(DispatcherPriority.Background);

                tempWindow.Show();
                // Start the Dispatcher Processing
                System.Windows.Threading.Dispatcher.Run();
            }));



            
        private void GetNewDataGridview2()
        {
            DataTable DropTable = new DataTable();
            string newquery = BuildQueryString();
            try
            {
                DropTable = DropModel.GetNewDataTable(newquery);
                DropTable.Columns.Remove("index");
                UpdateGridView(DropTable);

                UpdateBigNumbers(DropTable);

                DropTable = null;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in ViewModel ProcessLVLine1 " + ex.Message);
            }
        }